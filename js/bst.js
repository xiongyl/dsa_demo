function Bst() {	var my = new Object();	my.count = 0;	my.root = null;	my.process = "";	my.size = function() {		if (my.root == null) return 0;		return my.root.size;	}	my.height = function() {		if (my.root == null) return -1;		return my.root.height;	}	my.insert = function (value) {		if (my.root == null) {			my.root = TreeNode(value, my.count ++);			my.process = "New root [" + value + "] created. ";		} else {			my.process = "BST Inserting [" + value + "]. ";			var u = my.root, v = null, w = null;			while (u != null) {				v = u;				if (value == u.value) {					my.process += "[" + value + "] = [" + u.value + "]. ";					my.process += "[" + value + "] already exists. ";					return;				}				if (value < u.value) {					my.process += "[" + value + "] < [" + u.value + "]. ";					u = u.left;				}else{					my.process += "[" + value + "] > [" + u.value + "]. "					u = u.right;				}			}			var node = TreeNode(value, my.count ++);			if (v.value > value) v.left = node;			else v.right = node;			node.father = v;			my.process += "[" + value + "] inserted. ";			u = v;			v = node;			while (u != null) {				u.update();				v = u;				u = u.father;			}			my.root = v;		}	}	my.remove = function(value, swap) {		if (swap == "rand") {			if (Math.random() > 0.5) {				swap = "succ";			}else {				swap = "pred";			}		}		if (swap != "succ" && swap != "pred") {			swap = "pred";		}		my.process = "BST Removing [" + value + "]. ";		if (my.root == null) {			my.process += "[" + value + "] not found. ";			return;		}		var u = my.root, v = null, w = null;		while (u != null) {			if (value == u.value) {				my.process += "[" + value + "] = [" + u.value + "]. ";				break;			}			if (value < u.value) {				my.process += "[" + value + "] < [" + u.value + "]. ";				u = u.left;			}else{				my.process += "[" + value + "] > [" + u.value + "]. "				u = u.right;			}		}		if (u == null) {			my.process += "[" + value + "] not found. ";			return;		}		if (swap == "pred") {			while (u.left != null && u.right != null) {				w = u.left;				while (w != null) {					v = w;					w = w.right;				}				u.value = v.value;				u.id = v.id;				my.process += "Swaping with [" + v.value + "]. ";				u = v;			}		}else {			while (u.left != null && u.right != null) {				w = u.right;				while (w != null) {					v = w;					w = w.left;				}				u.value = v.value;				u.id = v.id;				my.process += "Swaping with [" + v.value + "]. ";				u = v;			}		}		if (u.left != null) {			v = u.left;			v.father = u.father;			if (u.isLeft()) {				u.father.left = v;			}else if(u.isRight()) {				u.father.right = v;			}			u = v.father;			while (u != null) {				u.update();				v = u;				u = u.father;			}			my.root = v;		}else if (u.right != null) {			v = u.right;			v.father = u.father;			if (u.isLeft()) {				u.father.left = v;			}else if(u.isRight()) {				u.father.right = v;			}			u = v.father;			while (u != null) {				u.update();				v = u;				u = u.father;			}			my.root = v;		}else {//leaf			if (u.isLeft()) {				u.father.left = null;			}else if (u.isRight()) {				u.father.right = null;			}			u = u.father;			v = u;			while (u != null) {				u.update();				v = u;				u = u.father;			}			my.root = v;		}		my.process += "[" + value + "] removed. ";	}		my.search = function(value) {		my.process = "BST Searching [" + value + "]. ";		var u = my.root;		while (u != null) {			if (value == u.value) {				my.process += "[" + value + "] = [" + u.value + "]. ";				my.process += "[" + value + "] found. ";				return;			}			if (value < u.value) {				my.process += "[" + value + "] < [" + u.value + "]. ";				u = u.left;			}else{				my.process += "[" + value + "] > [" + u.value + "]. "				u = u.right;			}		}		my.process += "[" + value + "] not found. ";	}		my.removeAll = function() {		my.process = "Removing tree nodes in post-order. ";		if (my.root != null) {			my.process += my.root.post();			my.root = null;		}		my.process += "All nodes have been removed. ";	}		my.clone = function() {		var newtree = Bst();		newtree.count = my.count;		newtree.process = my.process;		if (my.root != null) {			newtree.root = my.root.clone();		}		return newtree;	}		my.cloneTo = function(anotherTree) {		anotherTree.count = my.count;		anotherTree.process = my.process;		if (my.root != null) {			anotherTree.root = my.root.clone();		}	}	return my;}